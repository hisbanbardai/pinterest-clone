// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id String @id @default(uuid())
  username String
  name String
  email String @unique
  password String
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pins Pins[]
  // boards Boards[]
  comments Comments[]
  followers Follower_Following[] @relation("following") 
  //we wrote "following" in relation above and not "follower" because let's say if we want to get the followers of User A then the relation/join should be between id of Users table and followingId of Follower_Following table because in this case followingId will always be the id of User A
  following Follower_Following[] @relation("follower")
  //we wrote "follower" in relation above and not "following" because let's say if we want to get the list of users who are being followed by User A then the relation/join should be between id of Users table and followerId of Follower_Following table because in this case followerId will always be the id of User A

  savedPins User_Saved_Pins[]
}

model Pins {
  id String @id @default(uuid())
  imageUrl String
  title String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //FK
  userId String
  user Users @relation(fields: [userId], references: [id])
  //FK
  // boardId String
  // board Boards? @relation(fields: [boardId], references: [id])

  comments Comments[]
  savedPins User_Saved_Pins[]
}

// model Boards {
//   id String @id @default(uuid())
//   title String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   //FK
//   userId String
//   user Users @relation(fields: [userId], references: [id])

//   pins Pins[]
// }


model Comments {
  id String @id @default(uuid())
  text String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //FK
  userId String
  user Users @relation(fields: [userId], references: [id])
  //FK
  pinId String
  pin Pins @relation(fields: [pinId], references: [id])
}

model Follower_Following {
  followerId String
  follower Users @relation("follower", fields: [followerId], references: [id])
  followingId String
  following Users @relation("following", fields: [followingId], references: [id])
  @@id([followerId, followingId])
}

model User_Saved_Pins {
  userId String
  user Users @relation(fields: [userId], references: [id])
  pinId String
  pin Pins @relation(fields: [pinId], references: [id])

  @@id([userId, pinId])
}